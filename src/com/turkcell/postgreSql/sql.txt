-- comment out/in
DB Management
----------------------------------------------------
1-Mysql
2-Postgresql
3-H2-Db
4-Mssql
5-MariaDb
6-Sybase

Client: istemci
Server: isteği yerine getiren

Data(veri): işlenmemiş bilgilere denir.

VeriTabanı: Mantıksal ve fiziksel veri kümelerine denir.
Veri Tabanı Yönetim Sistemi: verileri saklamak, güvenliğini sağlamak, tekrarsız veriler oluşturmak, yedeğini almak

Veri Tabanı
----------------------------------------------------
Düzenli veriler topluluğudur.
Gereksiz verileri barındırmaz.
Bellek kullanımı düzenlidir.

İyi bir Veritabanı nasıl olmalıdır ?
----------------------------------------------------
Güvenilir olmalıdır.
Güvenli bir şekilde verilerimizi saklayabilmeliyiz.
Tekrarsız veriler olması gerekir.

Veri Tabanı Türleri
----------------------------------------------------
1-Hiyerarşik Veri tabanı
2-İlişkisel Veri tabanları
3-İlişkisel olmayan veri tabanları
4-Nesnesel Veri tabanları

İlişkisel Veri tabanları
----------------------------------------------------
satır(row) sütun(column)
Verileri tablolarda tutulur.
Normalization (Verileri daha düzgün muhafaza etmek)
Sql Manipulation
Dikey Ölçekleme ( ARAŞTIR )

RDBMS - VTYS(Veri Tabanı Yönetim Sistemi) => Mysql, Postgresql, Mssql
----------------------------------------------------
Veriyi muhafaza etmek
Veri bütünlüğünü korumak
DDL
DML

VTYS(Veri Tabanı Yönetim Sistemi)
----------------------------------------------------
Veri tabanı kavramı 1980 yıllarda ortaya çıkıyor.
Verileri saklamak, güncellemek, yönetmek, günveliği sağlamak
Veriler bütünlüğünü korumak
Veri tekrarında uzak durmak

SQL:
----------------------------------------------------
Sql standartımız 1983 IBM laboratuvarlarında standartlarını belirliyorlar.
1987 ANSI SQL standartlaştırmışlardır.
SQL Oracle, Sybase, Mysql, Mssql
Sorgulama dilidir. Programlama dili değildir.
DBMS'ler bu SQL kullanarak üzerine yeni özellikler inşa eder.
non-case-sensitive (Büyük küçük harfe duyarlı değildir.)
Noktalı virgül şeklinde yazalım.
Bütün VTYS'lerde kullanılır.
SEQUEL(Structed English Query Language)
SQL (Structed Query Language)
T-SQL: sql bağdaştırılmış bir kelimedir.

SQL ALT GRUPLARI
----------------------------------------------------
1-) DCL (Data Control Language) : Veri Kontrol Dili => Grant(Erişim izni), Revoke(Erişim iznini kaldır), Deny(Erişim engelleme)
2-) DML (Data Manipulation Language) : Veri İşleme Dili => insert, update, delete, merge
3-) DDL (Data Definition Language) : Veri Tanımlama => create, alter, drop, truncate, rename, comment
4-) DQL (Data Query Language) : Veri Sorgulama => select

SQL syntax 
----------------------------------------------------
Tek Tırnak: ''
Çift Tırnak: ""
backtick: ``

-- DDL
-- Database oluşturmak için (Türkçe karakterden dolayı default da yazılır.)
-- database oluşturmak için alttaki 2 yapıdan birisi kullanılabilir.
create DATABASE `deneme`;
create schema default charactern set utf8 collate utf8_turkish_ci;
default
-- Database silmek için
drop DATABASE deneme;
-- Alter bir tabloya sütun eklemek, mevcut sütunları silmek veya değiştirerek tablonun yapısını değiştirmek için kullanılır.
alter schema deneme default character set utf8 collate utf8_turkish_ci;

----------------------------------------------------
-- Table

--Common rulesd
-- ; (noktalı virgulu unutma)
-- büyük harfle yazılır
-- comment yazmayı unutma

-- değişkenleri oluştururken:
-- hepsi küçük harf ve kelimeler ayrıştırırken under_score kullanalım: student_name

--  MYSQL
CREATE TABLE person (
`tc_kimlik_id` SMALLINT(5) NOT NULL AUTO_INCREMENT,
`student_name` VARCHAR(150) NOT NULL,
`student_surname` VARCHAR(255) NULL,
`created_date` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (`tc_kimlik_id`));

-- Postgresql
CREATE TABLE IF NOT EXISTS public.deneme
(
    id serial NOT NULL,
    name character varying(155),
    surname character varying(255),
    PRIMARY KEY (id)
    );
ALTER TABLE public.deneme
    OWNER to postgres;
----------------------------------------------
-- select
select * from employees;
-- sütun gösterme
select last_name from employees;
-- Koşul belirleme
select last_name from employees where last_name='King';


----------------------------------------------
-- Operators
=
<> !=
>
<
>=
<=

-- Relation
AND: ve
OR : veya

----------------------------------------------
-- id name surname
-- deneme
select * from deneme;
-- insert
insert into deneme(name, surname) values ('adı55','soyadı55');
insert into deneme(name, surname) values ('adı77','soyadı77');

-- delete
-- Bu şekilde yapılırsa tüm tablo içeriği silinir.
delete from deneme;
delete from deneme where id=6;

-- update
-- Bu şekilde yapılırsa tüm name ler değişir.
update deneme set name='adı 99';
update deneme set name='adı 99' where id=8;

-- aritmetik işlemler
select 4+4;
select 4-4;
select 4/4;
select 4*4;

-- DDL (Tablo - veritabanı)          DML (row-column)          DQL               DCL
-- create                            insert			           select            Grand
-- drop			                     update										 Revoke
-- truncate		                     delete										 Deny
-- rename
-- alter

-- select kolonAdi from tabloAdi where ...
-- where      : şart için
-- distinct   : veri tekrarlarını önler
-- order by   : Küçükten büyüğe veya büyükten küçüğe sıralar. 
-- group by   : gruplar halinde verileri kümelemeye yarar.
-- having     : group by ile beraber kullanılır. where koşulu yerine kullanılır.
-- and        : ve
-- or         : veya
-- not        : değil
-- in         : subQuery için kullanılır.
-- between    : arasındaki verileri almak için kullanılır.
-- like       : filtreleme, search işlemlerinde kullanılır.
-- as (alias) : as takma adı

-- aggregate  =>
-- avg        : Sütunların ortalamasını verir
-- min        : Sütunların minimumunu verir.
-- max        : Sütunların maksimumunu verir.
-- count      : Sütunların adetini verir.
-- sum        : Sütunların toplamını verir.

-- İç içe sorguyla biz join'in yaptığını yapabiliriz.

-- inner join : tablolardaki ortak alan
-- left join  : ortak alan ve sol taraf
-- right join : ortak alan ve sağ taraf

-- data types (1byte = 8bit)
-- serial            : auto increment ve PK olmasını sağlar.
-- character varying : String ifadeler için kullanılır.
-- smallint          : 2 byte kadar veri tutar. < integer
-- integer           : 4 byte kadar veri tutar. < bigint
-- bigint            : 8 byte kadar veri tutar.
-- text              : çok büyük veriler için kullanılır.

-- date
-- TIMESTAMP         : YIL-AY-GÜN-SAAT-DAKİKA-SANİYE
-- DATE              : YIL-AY-GÜN
-- YEAR              : YIL
-- TIME              : SAAT-DAKİKA-SANİYE

select CURRENT_DATE;
select CURRENT_TIME;
select CURRENT_TIMESTAMP;
select LOCALTIME;
select LOCALTIMESTAMP;
select age ('2022-01-01','2021-01-01');

---------------------------------------------------------------
-- DDL

-- DATABASE


-- TABLE
CREATE TABLE IF NOT EXISTS public.student
(
    id serial NOT NULL,
    name character varying(155),
    surname character varying,
    "number" integer,
    PRIMARY KEY (id)
);

ALTER TABLE public.student
    OWNER to postgres;
---------------------------------------------------------------
-- DDL manuel
-- TABLE
create table if not exists person(
	id serial not null, 
	adi varchar(100) default 'personel adını yazmadınız',
	surname character varying(250),
	information TEXT,
	number integer,
	created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id)
)

create table if not exists school(
	id serial not null, 
	adi character varying(250),
	person_id int references person(id) not null,
	created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id)
)

-- Constraints (kısıtlayıcılar)

-- PK
-- FK
-- Unique : benzersiz
-- default : eğer bir şey girilmezse default olarak girilecek değer.
-- Check :

-- Table sil
drop table person; -- Tabloyu komple siler
truncate table person; -- İçini boşaltmak.
truncate table person restart identity; -- İçini boşaltır ve id'i sıfırlar.

-- TABLE'A Sütun ekleme

----------------------------------------------------------------
-- DQL
select * from student;
select * from person;
select * from school;
----------------------------------------------------------------
-- DML

-- insert
insert into student (name, surname, number) values ('Hamit','Mızrak',44);
insert into person (surname) values ('Mızrak');


-- delete
delete from student; -- Böyle yaparsak tüm tablo silinir
delete from student where id=1; -- Böyle yapılırsa id si 1 olanı siler.
-- DELETE 0 : Silinemedi.
-- DELETE 1 : 1 tane data sildi.

-- update
update student set name='isim değişti'; -- Böyle yaparsa tüm tablo nameleri değişir.
update student set name='isim değişti2' where id=2; -- Böyle yaparsa id'si 2 olan değişir.


select first_name, last_name from employees;

-- S3-) employees tablosundaki last_name ve first_name verileri getirelim(alias kullanalım => employees=emp olsun) ?

select first_name as emp2, last_name as emp3 from employees as emp;

-- S4-) employees tablosundaki adı Steven olan kişileri getir
select * from employees where first_name='Steven';
select * from employees as emp where emp.first_name='Steven';

-- S5-) employees tablosundaki adı Steven olmayan kişileri getir
select * from employees where not first_name='Steven';
select * from employees where first_name!='Steven';

-- S6-) employees tablosundaki first_name Steven olan tekrarı kaldıralım ve first_name getirelim
select distinct first_name from employees;

-- S7-) employees tablosundaki first_name küçükten büyüğe göre getirelim
select * from employees order by first_name;
select * from employees order by first_name desc;

-- S8-) employees tablosundaki adı Steven olan ve London da oturan kişileri getir
select * from employees where first_name='Steven' and city='London';
select * from employees where first_name like 'Steven' and city like 'London';

-- S9-) employees tablosundaki adı Steven olan veya London da oturan kişileri getir
select * from employees where first_name like 'Steven' or city like 'London';

-- S10-) employees tablosundaki first_name küçükten büyüğe doğru olacak şekilde ilk 5 tane veriyi getirelim
select * from employees order by first_name limit 5;
-- S11.1-) employees tablosundaki first_name i A ile başlayan bütün dataları getirelim
select * from employees where first_name like 'A%';
-- S11.2-) employees tablosundaki first_name i n ile biten bütün dataları getirelim
select * from employees where first_name like '%n';
-- S11.3-) employees tablosundaki first_name i 'an' geçen bütün dataları getirelim
select * from employees where first_name like '%an%';
-- S11.4-) employees tablosundaki first_name i ilk harfi 'S' son harfi 'n' ve 6 harfli olan bütün dataları getirelim
select * from employees where first_name like 'S____n';
-- S12-) employees tablosundaki extension sütununda 428 ile 465 arasındaki verileri bütün dataları getirelim
select * from employees where extension between '428' and '465';
-- S13-) employees tablosundaki first_name sütunundaki Steven, Michael, Anne ismindeki bütün dataları getirelim (in)
select * from employees where first_name in ('Steven','Michael','Anne');
-- IS NULL
-- employees tablosundaki region sütunundaki