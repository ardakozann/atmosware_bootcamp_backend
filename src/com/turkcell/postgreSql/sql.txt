-- comment out/in
DB Management
----------------------------------------------------
1-Mysql
2-Postgresql
3-H2-Db
4-Mssql
5-MariaDb
6-Sybase

Client: istemci
Server: isteği yerine getiren

Data(veri): işlenmemiş bilgilere denir.

VeriTabanı: Mantıksal ve fiziksel veri kümelerine denir.
Veri Tabanı Yönetim Sistemi: verileri saklamak, güvenliğini sağlamak, tekrarsız veriler oluşturmak, yedeğini almak

Veri Tabanı
----------------------------------------------------
Düzenli veriler topluluğudur.
Gereksiz verileri barındırmaz.
Bellek kullanımı düzenlidir.

İyi bir Veritabanı nasıl olmalıdır ?
----------------------------------------------------
Güvenilir olmalıdır.
Güvenli bir şekilde verilerimizi saklayabilmeliyiz.
Tekrarsız veriler olması gerekir.

Veri Tabanı Türleri
----------------------------------------------------
1-Hiyerarşik Veri tabanı
2-İlişkisel Veri tabanları
3-İlişkisel olmayan veri tabanları
4-Nesnesel Veri tabanları

İlişkisel Veri tabanları
----------------------------------------------------
satır(row) sütun(column)
Verileri tablolarda tutulur.
Normalization (Verileri daha düzgün muhafaza etmek)
Sql Manipulation
Dikey Ölçekleme ( ARAŞTIR )

RDBMS - VTYS(Veri Tabanı Yönetim Sistemi) => Mysql, Postgresql, Mssql
----------------------------------------------------
Veriyi muhafaza etmek
Veri bütünlüğünü korumak
DDL
DML

VTYS(Veri Tabanı Yönetim Sistemi)
----------------------------------------------------
Veri tabanı kavramı 1980 yıllarda ortaya çıkıyor.
Verileri saklamak, güncellemek, yönetmek, günveliği sağlamak
Veriler bütünlüğünü korumak
Veri tekrarında uzak durmak

SQL:
----------------------------------------------------
Sql standartımız 1983 IBM laboratuvarlarında standartlarını belirliyorlar.
1987 ANSI SQL standartlaştırmışlardır.
SQL Oracle, Sybase, Mysql, Mssql
Sorgulama dilidir. Programlama dili değildir.
DBMS'ler bu SQL kullanarak üzerine yeni özellikler inşa eder.
non-case-sensitive (Büyük küçük harfe duyarlı değildir.)
Noktalı virgül şeklinde yazalım.
Bütün VTYS'lerde kullanılır.
SEQUEL(Structed English Query Language)
SQL (Structed Query Language)
T-SQL: sql bağdaştırılmış bir kelimedir.

SQL ALT GRUPLARI
----------------------------------------------------
1-) DCL (Data Control Language) : Veri Kontrol Dili => Grant(Erişim izni), Revoke(Erişim iznini kaldır), Deny(Erişim engelleme)
2-) DML (Data Manipulation Language) : Veri İşleme Dili => insert, update, delete, merge
3-) DDL (Data Definition Language) : Veri Tanımlama => create, alter, drop, truncate, rename, comment
4-) DQL (Data Query Language) : Veri Sorgulama => select

SQL syntax 
----------------------------------------------------
Tek Tırnak: ''
Çift Tırnak: ""
backtick: ``

-- DDL
-- Database oluşturmak için (Türkçe karakterden dolayı default da yazılır.)
-- database oluşturmak için alttaki 2 yapıdan birisi kullanılabilir.
create DATABASE `deneme`;
create schema default charactern set utf8 collate utf8_turkish_ci;
default
-- Database silmek için
drop DATABASE deneme;
-- Alter bir tabloya sütun eklemek, mevcut sütunları silmek veya değiştirerek tablonun yapısını değiştirmek için kullanılır.
alter schema deneme default character set utf8 collate utf8_turkish_ci;

----------------------------------------------------
-- Table

--Common rulesd
-- ; (noktalı virgulu unutma)
-- büyük harfle yazılır
-- comment yazmayı unutma

-- değişkenleri oluştururken:
-- hepsi küçük harf ve kelimeler ayrıştırırken under_score kullanalım: student_name

--  MYSQL
CREATE TABLE person (
`tc_kimlik_id` SMALLINT(5) NOT NULL AUTO_INCREMENT,
`student_name` VARCHAR(150) NOT NULL,
`student_surname` VARCHAR(255) NULL,
`created_date` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (`tc_kimlik_id`));

-- Postgresql
CREATE TABLE IF NOT EXISTS public.deneme
(
    id serial NOT NULL,
    name character varying(155),
    surname character varying(255),
    PRIMARY KEY (id)
    );
ALTER TABLE public.deneme
    OWNER to postgres;
----------------------------------------------
-- select
select * from employees;
-- sütun gösterme
select last_name from employees;
-- Koşul belirleme
select last_name from employees where last_name='King';


----------------------------------------------
-- Operators
=
<> !=
>
<
>=
<=

-- Relation
AND: ve
OR : veya

----------------------------------------------
-- id name surname
-- deneme
select * from deneme;
-- insert
insert into deneme(name, surname) values ('adı55','soyadı55');
insert into deneme(name, surname) values ('adı77','soyadı77');

-- delete
-- Bu şekilde yapılırsa tüm tablo içeriği silinir.
delete from deneme;
delete from deneme where id=6;

-- update
-- Bu şekilde yapılırsa tüm name ler değişir.
update deneme set name='adı 99';
update deneme set name='adı 99' where id=8;

-- aritmetik işlemler
select 4+4;
select 4-4;
select 4/4;
select 4*4;

-- DDL (Tablo - veritabanı)          DML (row-column)          DQL               DCL
-- create                            insert			           select            Grand
-- drop			                     update										 Revoke
-- truncate		                     delete										 Deny
-- rename
-- alter

-- select kolonAdi from tabloAdi where ...
-- where      : şart için
-- distinct   : veri tekrarlarını önler
-- order by   : Küçükten büyüğe veya büyükten küçüğe sıralar. 
-- group by   : gruplar halinde verileri kümelemeye yarar.
-- having     : group by ile beraber kullanılır. where koşulu yerine kullanılır.
-- and        : ve
-- or         : veya
-- not        : değil
-- in         : subQuery için kullanılır.
-- between    : arasındaki verileri almak için kullanılır.
-- like       : filtreleme, search işlemlerinde kullanılır.
-- as (alias) : as takma adı

-- aggregate  =>
-- avg        : Sütunların ortalamasını verir
-- min        : Sütunların minimumunu verir.
-- max        : Sütunların maksimumunu verir.
-- count      : Sütunların adetini verir.
-- sum        : Sütunların toplamını verir.

-- İç içe sorguyla biz join'in yaptığını yapabiliriz.

-- inner join : tablolardaki ortak alan
-- left join  : ortak alan ve sol taraf
-- right join : ortak alan ve sağ taraf

-- data types (1byte = 8bit)
-- serial            : auto increment ve PK olmasını sağlar.
-- character varying : String ifadeler için kullanılır.
-- smallint          : 2 byte kadar veri tutar. < integer
-- integer           : 4 byte kadar veri tutar. < bigint
-- bigint            : 8 byte kadar veri tutar.
-- text              : çok büyük veriler için kullanılır.

-- date
-- TIMESTAMP         : YIL-AY-GÜN-SAAT-DAKİKA-SANİYE
-- DATE              : YIL-AY-GÜN
-- YEAR              : YIL
-- TIME              : SAAT-DAKİKA-SANİYE

select CURRENT_DATE;
select CURRENT_TIME;
select CURRENT_TIMESTAMP;
select LOCALTIME;
select LOCALTIMESTAMP;
select age ('2022-01-01','2021-01-01');

---------------------------------------------------------------
-- DDL

-- DATABASE


-- TABLE
CREATE TABLE IF NOT EXISTS public.student
(
    id serial NOT NULL,
    name character varying(155),
    surname character varying,
    "number" integer,
    PRIMARY KEY (id)
);

ALTER TABLE public.student
    OWNER to postgres;
---------------------------------------------------------------
-- DDL manuel
-- TABLE
create table if not exists person(
	id serial not null, 
	adi varchar(100) default 'personel adını yazmadınız',
	surname character varying(250),
	information TEXT,
	number integer,
	created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id)
)

create table if not exists school(
	id serial not null, 
	adi character varying(250),
	person_id int references person(id) not null,
	created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id)
)

-- Constraints (kısıtlayıcılar)

-- PK
-- FK
-- Unique : benzersiz
-- default : eğer bir şey girilmezse default olarak girilecek değer.
-- Check :

-- Table sil
drop table person; -- Tabloyu komple siler
truncate table person; -- İçini boşaltmak.
truncate table person restart identity; -- İçini boşaltır ve id'i sıfırlar.

-- TABLE'A Sütun ekleme

----------------------------------------------------------------
-- DQL
select * from student;
select * from person;
select * from school;
----------------------------------------------------------------
-- DML

-- insert
insert into student (name, surname, number) values ('Hamit','Mızrak',44);
insert into person (surname) values ('Mızrak');


-- delete
delete from student; -- Böyle yaparsak tüm tablo silinir
delete from student where id=1; -- Böyle yapılırsa id si 1 olanı siler.
-- DELETE 0 : Silinemedi.
-- DELETE 1 : 1 tane data sildi.

-- update
update student set name='isim değişti'; -- Böyle yaparsa tüm tablo nameleri değişir.
update student set name='isim değişti2' where id=2; -- Böyle yaparsa id'si 2 olan değişir.


select first_name, last_name from employees;

-- S3-) employees tablosundaki last_name ve first_name verileri getirelim(alias kullanalım => employees=emp olsun) ?

select first_name as emp2, last_name as emp3 from employees as emp;

-- S4-) employees tablosundaki adı Steven olan kişileri getir
select * from employees where first_name='Steven';
select * from employees as emp where emp.first_name='Steven';

-- S5-) employees tablosundaki adı Steven olmayan kişileri getir
select * from employees where not first_name='Steven';
select * from employees where first_name!='Steven';

-- S6-) employees tablosundaki first_name Steven olan tekrarı kaldıralım ve first_name getirelim
select distinct first_name from employees;

-- S7-) employees tablosundaki first_name küçükten büyüğe göre getirelim
select * from employees order by first_name;
select * from employees order by first_name desc;

-- S8-) employees tablosundaki adı Steven olan ve London da oturan kişileri getir
select * from employees where first_name='Steven' and city='London';
select * from employees where first_name like 'Steven' and city like 'London';

-- S9-) employees tablosundaki adı Steven olan veya London da oturan kişileri getir
select * from employees where first_name like 'Steven' or city like 'London';

-- S10-) employees tablosundaki first_name küçükten büyüğe doğru olacak şekilde ilk 5 tane veriyi getirelim
select * from employees order by first_name limit 5;
-- S11.1-) employees tablosundaki first_name i A ile başlayan bütün dataları getirelim
select * from employees where first_name like 'A%';
-- S11.2-) employees tablosundaki first_name i n ile biten bütün dataları getirelim
select * from employees where first_name like '%n';
-- S11.3-) employees tablosundaki first_name i 'an' geçen bütün dataları getirelim
select * from employees where first_name like '%an%';
-- 11.3-) employees tablosundaki first_name sütunundaki 'n' ile başlasın ve 'y' harfi ile biten bütün dataları getirelim ?
select * from employees as emp where emp.first_name like 'N%y';
-- S11.4-) employees tablosundaki first_name i ilk harfi 'S' son harfi 'n' ve 6 harfli olan bütün dataları getirelim
select * from employees where first_name like 'S____n';
-- S12-) employees tablosundaki extension sütununda 428 ile 465 arasındaki verileri bütün dataları getirelim
select * from employees where extension between '428' and '465';
-- S13-) employees tablosundaki first_name sütunundaki Steven, Michael, Anne ismindeki bütün dataları getirelim (in)
select * from employees where first_name in ('Steven','Michael','Anne');
-- IS NULL
-- employees tablosundaki region sütunundaki

--------------------------------------------------------------------------------------------------------------------------

-- cast türler arasında değiştirme işlemlerinde kullanıyoruz.
-- cast('428' as integer)
-- S13-) employees tablosundaki extension sütununda '428' ile '465' öncelikle character varying olanı integer cast yapalım ve sonrasında
-- arasındaki verileri bütün dataları getirelim ? (between cast)
select * from employees where cast(extension as integer) between 428 and 465;
select * from employees order by cast(extension as integer);
-- S14-) employees tablosundaki region sütunundaki null olan değerleri listeyelim ?
select * from employees where region is null;
-- S14-) employees tablosundaki region sütunundaki null olmayan değerleri listeyelim ?
select * from employees where region is not null;
-- S15-) employees tablosundaki region sütununda null olan dataları 'değişti' olarak değiştir.
update employees set region='değişti' where region is null;
select * from employees where region like 'değişti';

select cast('5' as integer);
select cast('5' as INTEGER);
select cast(5 as character varying);
select cast(5 as char);
select cast('2022-02-20 9:49:52' as Date);
select cast('2022-02-20 9:49:52' as time);

--in: subQuery ve sutundaki birden fazla aramak için kullanıyoruz.
--in: aynı sutundaki birden fazla data getirmek için kullanıyoruz.
--s13-) employees tablosundaki first_name sutunundaki Steven,Michael,Anne ismindeki bütün dataları getirelim ?  (in)
select * from employees as emp where emp.first_name in('Steven','Michael','Anne');


-----------------------------------------------------------------------------------------------
--is null : boş olan datalar
--s14-) employees tablosundaki region sutunundaki null olan değerleri listeleyelim?
select * from employees as emp where emp.region is null;

--is not null : boş olmayan datalar
--s15-) employees tablosundaki region sutunundaki not null olan değerleri listeleyelim?
select * from employees as emp where emp.region is not null;

--s16-) employees tablosundaki region sutunundaki null olan dataları 'değişti' yazısını yazarak listeleyelim?(update,is null)
update employees as emp  set region='değişti' where emp.region is null;


-----------------------------------------------------------------------------------------------

--MATH
--Mutlak değer
select abs(-44);

--Karekök
select sqrt(16);

--üslü sayılar
select pow(2,5);

--üste yuvarla
select ceil(4.1);

--aşağı yuvarla
select floor(4.9);

--üst-aşağı yuvarla
select round(4.5);
select round(4.4);

--random-rastgele
select random()*2+1;
select round(random()*2+1);
-----------------------------------------------------------------------------------------------
--aggreagate
select emp.employee_id from employees as emp;

--count: sayma
select count(*) from employees as emp; 

-- en küçük sayı
select min(emp.employee_id) from employees as emp;

-- en büyük sayı
select max(emp.employee_id) from employees as emp;

--toplamları
select sum(emp.employee_id) from employees as emp;

--ortalaması
select avg(emp.employee_id) from employees as emp;


-----------------------------------------------------------------------------------------------
-- version
select version();
select username from pg_user;
-- databasedeki kullanıcıları listeler
-- YAŞ HESAPLAMASI
select age('2022-01-01','2021-01-01')

--sleep
--pg_sleep(5) 5 saniye bekletiyor.
select pg_sleep(5);
select emp.region from employees as emp;

 --ascii
 select ASCII ('1');
 
  -- sign: negatif pozitif mi ?  pozitif:+1 negatif:-1
 select  sign(44); --pozitif :+
 select  sign(-44);--negatif:-1

-----------------------------------------------------------------------------------------------

-- S17-) employees tablosundaki birth_date sütnununda kaç tane null vardır ?

-- S17-) employees tablosundaki birth_date sütununda kaç tane null olmayan vardır ?

-- S18-) employees tablosundaki employee_id en küçüğü alt taban, en büyüğü üst taban olacak şekilde üslü sayı sorgusu ?

select pow(max(employee_id), min(employee_id)) from employees;

-----------------------------------------------------------------------------------------------
-- coalescence içerisindeki ilk null olmayan değeri döndürür
update employees set region=null where region like 'değişti';
select coalesce(region,'not provided') from employees;

-- NULLIF: verilerin iki parametre de null olmayanı döndürür
select IFNULL(null,null);
select IFNULL(1,null);
select IFNULL(null,1);
-----------------------------------------------------------------------------------------------
-- STRING
select last_name from employees;

-- lowerCase
select lower(last_name) from employees;

-- upperCase
select upper(last_name) from employees;

-- subString
select substring(last_name,1,3) from employees;-- 1 başlangıç indexi, 3 indexten sonra kaç harf

-- replace
select replace(last_name,'a','ARABA') from employees;

--sol bosluk al
select ltrim(last_name) from employees;

--sag bosluk al
select rtrim(last_name) from employees;

--length: harf sayısını verir
select length(last_name) from employees;

--repeat: tekrar sayısını verir
select repeat(last_name,3) from employees;

--concat: sonuna eklemeye yarar
select repeat(concat(last_name,' '), 3) from employees;

select * from employees;
-----------------------------------------------------------------------------------------------
--Soru
-- northwind databaseine student diye bir tablo oluşturalım
-- attributes: student_id,student_name(150) UNIQUE,student_surname(250),vizeNotes,finalNotes,current_time
create table if not exists student (
	student_id serial PRIMARY KEY,
	student_name character varying(150) UNIQUE,
	student_surname character varying(250),
	vize_note integer,
	final_note integer,
	created_date date default current_date
);
-- 1-) 6 tane insert into
insert into student (student_name, student_surname, vize_note, final_note) values ('Dianne', 'Checchi', 7, 8);
insert into student (student_name, student_surname, vize_note, final_note) values ('Lennie', 'Ghiotto', 81, 30);
insert into student (student_name, student_surname, vize_note, final_note) values ('Gay', 'Hardinge', 65, 90);
insert into student (student_name, student_surname, vize_note, final_note) values ('Enid', 'Glabach', 24, 20);
insert into student (student_name, student_surname, vize_note, final_note) values ('Quintin', 'Willment', 13, 32);
insert into student (student_name, student_surname, vize_note, final_note) values ('Cody', 'Dewey', 83, 74);
-- 2-) son kayıtta güncelleme yapalım student_name='silinecek' where id=max
update student set student_name='silinecek' where student_id= (SELECT MAX(student_id) from student);
-- 3-) son veriyi silelim (max)
delete from student where student_id = (SELECT MAX(student_id) from student);
-- 4-) student tablosunun verilerini listeleyelim. 
select * from student;
-- 6-) student vize notları listeleyelim.
select vize_note from student;
-- 7-) student final notları listeleyelim.
select final_note from student;
-- 8-) student tablosundaki student_name columnsin sonu 2 ile biten listeleyim.
select * from student where student_name like '%2';
-- 9-) student tablosundaki vize_notunun %40  + final notunun %60 hesaplayan ve sonuc diye bir kolun oluşturalım.
select concat(student_name,' ',student_surname) as  full_name, ((vize_note*0.4) + (final_note*0.6)) as total_note from student; 
--  aggregation
-- 10-) çıkan sonuclarından en büyüğünü alias:enbuyuk bulalım.
select MAX((vize_note*0.4) + (final_note*0.6)) as total_note from student; 
select concat(student_name,' ',student_surname) as  full_name, ((vize_note*0.4) + (final_note*0.6)) as total_note from student order by total_note desc limit 1; 
-- 11-) çıkan sonuclarından en küçüğü alias:enKucuk bulalım.
select MIN((vize_note*0.4) + (final_note*0.6)) as total_note from student; 
select concat(student_name,' ',student_surname) as  full_name, ((vize_note*0.4) + (final_note*0.6)) as total_note from student order by total_note limit 1; 
-- 12-) çıkan sonuclarından toplamları alias:toplam bulalım.
select SUM((vize_note*0.4) + (final_note*0.6)) as sum_of_notes from student;
-- 13-) çıkan sonuclarından ortalaması alias:ortalama bulalım.
select AVG((vize_note*0.4) + (final_note*0.6)) as avg_of_notes from student;
-- 14-) çıkan sonuclarından toplam kaç adet vardır alias:sayi bulalım.
select COUNT((vize_note*0.4) + (final_note*0.6)) as count_of_notes from student;

--union
--join
--group by
--having
--transaction
--Trigger 
--indexes
--view
--function
--sp

ERD DİYAGRAMINA BAK ARAŞTIR

--------------------------------------------------------------
-- subQuery    :
-- index       : tablolarda bazen milyonlarca data olabilir. Örneğin student tablosundaki student_name sorgusunu çok atıyorsan
--               Bu sorgu her defasında database'i yoracaktır. Biz de sürekli attığımız sorguları index ile oluşturup datayı cache
--               belleğine alıp performans artırımı sağlanır.Sürekli yapılan sorgularda kullaınılır.
-- view        : Database de uzun uzun sürekli sorgularımız varsa bize yardımcı olacak bileşen view'dir.
-- union       :
-- join        :
-- function    :
-- group by    :
-- having      :
-- transaction : ya hep ya hiç kuralına göre çalışır. Bizim bir datamızın bütün işlemleri bittikten sonra işlemler yapılmasını isteriz.
--               
-- trigger     :

--------------------------------------------------------------
-- subQuery
-- İç içe sorgulamak demektir. Aslında javada öğrendiğimiz monad yapısıdır.
-- yani bir query çıktı başka bir örneğin girdisidir.
select * from employees;
-- employee id si yüksek olana güncelleme yapsın

-- CREATE TABLE
create table if not exists student(
	student_id serial PRIMARY KEY NOT NULL,
	student_name character varying(150),
	student_surname character varying,
	vize_notes integer,
	final_notes integer,
	created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
)

-- drop
drop table student;

-- select
select * from student;

-- id si en yüksek olanı dinamik şekilde bulsun student_name='silinecek' yazsın
update student set student_name='silinecek' where student_id=(select MAX(student_id) from student);
-- birden fazla aynı tipte parametre verilirken in kullanılır
update student set student_name='silinecek' in (student_id=(select MAX(student_id) from student));
-- final notu yüksek olan sorguda final notunu ve vize notunu 10 puan düşürelim
update student set vize_note=vize_note - 10, final_note=final_note - 10 where final_note=(select MAX(final_note) from student);

--------------------------------------------------------------
--CREATE INDEX
-- create index indexAdi ON tabloAdi(tabloAttribute)
create index student_index_name on student(student_name);
select s2.student_name from student as s2;
--------------------------------------------------------------
-- view
create view surekli_sorgulattigim_sorgu
AS
select student_name from student where student_name like 'Q%n';

-- view çağırması
select * from surekli_sorgulattigim_sorgu;
--view silmek 
drop view surekli_sorgulattigim_sorgu;

--------------------------------------------------------------
-- transaction

select * from region;
insert into region(region_id, region_description) values (5,'yeni data5');
insert into region(region_id, region_description) values (6,'yeni data6');
insert into region(region_id, region_description) values (7,'yeni data7');

-- 3 tane veri olsun. Ben bunlardan sadece 2 tanesini sileceğim.
BEGIN;
	delete from region where region.region_id=5;
	delete from region where region.region_id=6;
SAVEPOINT birinci;
	delete from region where region.region_id=7;
ROLLBACK TO birinci;
COMMIT;

select * from region;
delete from region where region.region_id=5;

--------------------------------------------------------------
--Function
--Temp
create function fonksiyonAdi()
returns donusVeriTuru
language plpgsql
as
$$
	declare -- değişkneler
	begin -- işlemler
		return
	end;
$$;

create function topla()
returns integer -- geri dönüş değeri
language plpgsql -- dili
as
$$
	declare -- değişken oluşturmak
		sonuc integer;
		sayi1 integer=10;
		sayi2 integer=20;
	begin
		sonuc=sayi1+sayi2;
		return sonuc;
	end;
$$;

-- Function çağırma
select topla() as toplam;

-- delete function
drop function if exists topla;

-- girilen bir kelimenin ilk 3 harfini gösteren function yazınız ?

create function metinSub(kelime varchar(253))
returns varchar
language plpgsql
as
$$
declare
	temp_data varchar(253);
begin
	temp_data=substring(kelime,1,3);
	return upper(temp_data);
end;
$$;

select metinSub('İstanbul');

--Drop
drop function if exists metinSub;

-- Girilen bir kelimeti bütün harfleri büyük yapan fonksiyon ?
create function to_upper (temp varchar(255))
returns varchar(255)
language plpgsql
as
$$
    begin
        return UPPER(temp);
    end;
$$

select to_upper('deneme');
-- Girilen bir kelimeti bütün harfleri küçük yapan fonksiyon ?
create function to_lower (temp varchar(255))
returns varchar(255)
language plpgsql
as
$$
    begin
        return LOWEr(temp);
    end;
$$

select to_lower('DENEME');
-- Türkçe karak olan üğşçöı => replace => ugscoi
create or replace function turkishToEnglish(valueData varchar(255))
returns varchar(255)
language plpgsql
as
$$
	begin
		return translate(valueData,'uğşçöı','ugscoi');
	end;
$$;

select turkishToEnglish('çorum');
-- dereceyi fahrenheit'e çeviren fonksiyon ? F=C*1.8+32
create function fahrenheit(celcius float)
returns FLOAT
language plpgsql
as
$$
declare
    result float;
begin
    result = (celcius*1.8) + 32;
    return result;
end;
$$;

select fahrenheit(10);
-- girilen 3 sayıyı ortalaması alınan fonksiyon ?
create function ortalama(sayi1 int, sayi2 int, sayi3 int)
returns FLOAT
language plpgsql
as
$$
begin
    return (sayi1+sayi2+sayi3)/3;
end;
$$;

select ortalama(10,20,30);
-- verilen yarıçapla dairenin alanını hesaplayan fonskiyon ? p*r^2
create function alan_hesapla(r float)
returns float
language plpgsql
as
$$
begin
    return pi()*POWER(r,2);
end;
$$;

select alan_hesapla(5);

--------------------------------------------------------------
-- yan yana tabloları birleştirmek
select * from orders,region;

-- union: birden fazla tabloyu tek bir tabloda göstermeye denir
-- union şartları: attribute sayısı ve türleri aynı olacak
create table if not exists union1(
	union_id serial not null,
	adi character varying,
	soyadi character varying,
	PRIMARY KEY(union_id)
)
-- Insert
insert into union1(adi,soyadi) values('1','X');
insert into union1(adi,soyadi) values('1','Y');
insert into union1(adi,soyadi) values('1','X');

create table if not exists union2(
	union_id serial not null,
	adi character varying,
	soyadi character varying,
	PRIMARY KEY(union_id)
)

insert into union2(adi,soyadi) values('1','X');
insert into union2(adi,soyadi) values('1','Y');
insert into union2(adi,soyadi) values('1','X');

select * from union1,union2;
-- UNION ( TEKRAR EDEN VERİLERİ GÖSTERMEZ)
select * from union1
union
select * from union2

--------------------------------------------------------------
-- Join: 
-- Yazar(1) kitaplar (N)
-- Banka(1) - Müşteriler(N)

-- YAZAR(1)
create table if not exists yazar(
	yazar_id serial not null,
	yazar_adi character varying,
	yazar_soyadi character varying,
	created_date timestamp with time zone default current_timestamp,
	primary key(yazar_id)
)

-- KITAPLAR (N)
create table if not exists kitap(
	kitap_id serial not null,
	kitap_adi character varying,
	kitap_fiyat integer,
	created_date timestamp with time zone default current_timestamp,
	yazar_id int not null REFERENCES yazar(yazar_id),
	primary key(kitap_id)
)

insert into yazar(yazar_adi, yazar_soyadi) values ('Reşat Nuri','Gültekin');
insert into kitap(kitap_adi, kitap_fiyat, yazar_id) values ('Çalışkuşu',85,1);
insert into kitap(kitap_adi, kitap_fiyat, yazar_id) values ('Yaprak Dökümü',100,1);


select * from kitap;
select * from yazar;

select * from yazar as y1 inner join kitap as k1 on y1.yazar_id=k1.yazar_id;